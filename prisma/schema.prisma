// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String    @db.VarChar(65)
  lastName      String    @db.VarChar(65)
  address       String    @db.VarChar(180)
  city          String    @db.VarChar(65)
  postalCode    String    @db.VarChar(20)
  country       String    @db.VarChar(65)
  phone         String    @db.VarChar(30)
  email         String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  isActive      Boolean   @default(true)
  gdprConsent   Boolean   @default(false) 
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        Int       @default(1)
  carts         Cart[]
  advice        Advice[]
  orders        Order[]
  profileImagePath String? @db.VarChar(255)
}
model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(65)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.Text
  price       Float     @db.Float
  imagePath   String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  cartProducts CartProduct[]
  advice      Advice[]
  orderItems OrderItem[]
  inventory  Inventory?
}

model CartProduct {
  id          Int       @id @default(autoincrement())
  quantity    Int       @db.Int
  cartId      Int
  productId   Int
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Cart {
  id            Int       @id @default(autoincrement())
  userId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartProducts  CartProduct[]

  @@unique([userId])
}

model Advice {
  id          Int       @id @default(autoincrement())
  content     String    @db.Text
  rating      Int       @db.Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  productId   Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Inventory {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  quantity  Int
  lastUpdated DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  status        String      @db.VarChar(50)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
  payment       Payment?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  amount        Float
  status        String   @db.VarChar(50)
  paymentMethod String   @db.VarChar(50)
  transactionId String?  @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id])
}